spring:
  config:
    import: "optional:file:.env[.properties]"
  application:
    name: workerp_auth_service
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: profile, email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-name: Google
          github:
            client-id: ${GITHUB_CLIENT_ID}
            client-secret: ${GITHUB_CLIENT_SECRET}
            scope: user:email
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user
            user-name-attribute: login
  jackson:
    serialization:
      FAIL_ON_EMPTY_BEANS: false
  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
# App custom variables
app:
  jwt:
    access:
      secret: ${JWT_ACCESS_SECRET}
      expiration: ${JWT_ACCESS_EXPIRATION}
    refresh:
      secret: ${JWT_REFRESH_SECRET}
      expiration: ${JWT_REFRESH_EXPIRATION}
  admin:
    email: ${ADMIN_EMAIL}
    password: ${ADMIN_PASSWORD}
  client:
    path: ${CLIENT_PATH}


server:
  port: ${PORT}

feign:
  api-gateway:
    url: http://localhost:8080
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: full
